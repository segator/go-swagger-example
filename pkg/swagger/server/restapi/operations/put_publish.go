// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutPublishHandlerFunc turns a function with the right signature into a put publish handler
type PutPublishHandlerFunc func(PutPublishParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutPublishHandlerFunc) Handle(params PutPublishParams) middleware.Responder {
	return fn(params)
}

// PutPublishHandler interface for that can handle valid put publish params
type PutPublishHandler interface {
	Handle(PutPublishParams) middleware.Responder
}

// NewPutPublish creates a new http.Handler for the put publish operation
func NewPutPublish(ctx *middleware.Context, handler PutPublishHandler) *PutPublish {
	return &PutPublish{Context: ctx, Handler: handler}
}

/* PutPublish swagger:route PUT /publish putPublish

publish a message to cloud

*/
type PutPublish struct {
	Context *middleware.Context
	Handler PutPublishHandler
}

func (o *PutPublish) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutPublishParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ApplicationHealthzHandlerFunc turns a function with the right signature into a application healthz handler
type ApplicationHealthzHandlerFunc func(ApplicationHealthzParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ApplicationHealthzHandlerFunc) Handle(params ApplicationHealthzParams) middleware.Responder {
	return fn(params)
}

// ApplicationHealthzHandler interface for that can handle valid application healthz params
type ApplicationHealthzHandler interface {
	Handle(ApplicationHealthzParams) middleware.Responder
}

// NewApplicationHealthz creates a new http.Handler for the application healthz operation
func NewApplicationHealthz(ctx *middleware.Context, handler ApplicationHealthzHandler) *ApplicationHealthz {
	return &ApplicationHealthz{Context: ctx, Handler: handler}
}

/* ApplicationHealthz swagger:route GET /healthz applicationHealthz

ApplicationHealthz application healthz API

*/
type ApplicationHealthz struct {
	Context *middleware.Context
	Handler ApplicationHealthzHandler
}

func (o *ApplicationHealthz) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewApplicationHealthzParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
